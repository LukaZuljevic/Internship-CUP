// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  name                String
  surname             String
  passwordHash        String
  subscriptionPlan    SubscriptionPlan @default(FREE_TRIAL)
  subscriptionExpiry  DateTime         @default(dbgenerated("CURRENT_TIMESTAMP + interval '3 days'"))

  // Relations
  boats               Boat[]
  transactions        Transaction[]
  notifications       Notification[]
}

model Boat {
  id                Int           @id @default(autoincrement())
  name              String
  registration      String        @unique
  userId            Int
  length            Float
  width             Float
  boatType          BoatType?
  
  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications     Notification[]
}

model Rule {
  id                Int           @id @default(autoincrement())
  name              String
  type              RuleType
  description       String
  
  // Relations
  mapElements       MapElement[]
  notifications     Notification[]
}

model MapElement {
  id                Int           @id @default(autoincrement())
  ruleId            Int?
  name              String
  type              MapElementType
  objectType ObjectType?
  coordinates       Json          // GeoJSON format (Polygon or Point)
  description       String?
  isActive          Boolean       @default(true)
  fillColor  String?
  fillOpacity Decimal? @db.Decimal(10, 2)
  lineColor String?
  lineWidth Decimal? @db.Decimal(10, 2)

  // Relations
  rule              Rule?          @relation(fields: [ruleId], references: [id])
  notifications     Notification[]
}

model Notification {
  id                Int           @id @default(autoincrement())
  userId            Int
  boatId            Int?
  mapElementId      Int
  ruleId            Int
  timestamp         DateTime      @default(now())
  locationCoordinates Json        // GeoJSON point
  
  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  boat              Boat?          @relation(fields: [boatId], references: [id], onDelete: Cascade)
  mapElement        MapElement    @relation(fields: [mapElementId], references: [id])
  rule              Rule          @relation(fields: [ruleId], references: [id])
}

enum SubscriptionPlan {
  FREE_TRIAL
  PAID
}

enum BoatType {
  MOTORBOAT
  DINGHY
  YACHT
}

enum RuleType {
  RESTRICTION
  INFO
  WARNING
}

enum MapElementType {
  ZONE
  POINT
}

enum ObjectType {
  ANCHOR
  LIGHTHOUSE
  FUEL_DOCK
  RIDGE
  HARBOR_MASTER
}